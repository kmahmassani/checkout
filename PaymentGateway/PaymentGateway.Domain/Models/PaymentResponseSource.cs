/*
 * Payment Gateway
 *
 * Gateway to facilitate processing payments and to retrieve payment details. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kmahmassani@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace PaymentGateway.Domain.Models
{ 
    /// <summary>
    /// A card payment source
    /// </summary>
    [DataContract]
    public partial class PaymentResponseSource : IEquatable<PaymentResponseSource>
    { 
        /// <summary>
        /// The expiry month
        /// </summary>
        /// <value>The expiry month</value>
        [Required]
        [DataMember(Name="expiry_month")]
        public int? ExpiryMonth { get; set; }

        /// <summary>
        /// The expiry year
        /// </summary>
        /// <value>The expiry year</value>
        [Required]
        [DataMember(Name="expiry_year")]
        public int? ExpiryYear { get; set; }

        /// <summary>
        /// The cardholder&#x27;s name
        /// </summary>
        /// <value>The cardholder&#x27;s name</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The card scheme
        /// </summary>
        /// <value>The card scheme</value>
        [DataMember(Name="scheme")]
        public string Scheme { get; set; }

        /// <summary>
        /// The last four digits of the card number
        /// </summary>
        /// <value>The last four digits of the card number</value>
        [Required]
        [DataMember(Name="last4")]
        public string Last4 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentResponseSource {\n");
            sb.Append("  ExpiryMonth: ").Append(ExpiryMonth).Append("\n");
            sb.Append("  ExpiryYear: ").Append(ExpiryYear).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Scheme: ").Append(Scheme).Append("\n");
            sb.Append("  Last4: ").Append(Last4).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentResponseSource)obj);
        }

        /// <summary>
        /// Returns true if PaymentResponseSource instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentResponseSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentResponseSource other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExpiryMonth == other.ExpiryMonth ||
                    ExpiryMonth != null &&
                    ExpiryMonth.Equals(other.ExpiryMonth)
                ) && 
                (
                    ExpiryYear == other.ExpiryYear ||
                    ExpiryYear != null &&
                    ExpiryYear.Equals(other.ExpiryYear)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Scheme == other.Scheme ||
                    Scheme != null &&
                    Scheme.Equals(other.Scheme)
                ) && 
                (
                    Last4 == other.Last4 ||
                    Last4 != null &&
                    Last4.Equals(other.Last4)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ExpiryMonth != null)
                    hashCode = hashCode * 59 + ExpiryMonth.GetHashCode();
                    if (ExpiryYear != null)
                    hashCode = hashCode * 59 + ExpiryYear.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Scheme != null)
                    hashCode = hashCode * 59 + Scheme.GetHashCode();
                    if (Last4 != null)
                    hashCode = hashCode * 59 + Last4.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentResponseSource left, PaymentResponseSource right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentResponseSource left, PaymentResponseSource right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
