/*
 * Payment Gateway
 *
 * Gateway to facilitate processing payments and to retrieve payment details. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kmahmassani@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace PaymentGateway.Domain.Models
{ 
    /// <summary>
    /// Payment Response
    /// </summary>
    [DataContract]
    public partial class PaymentResponse : IEquatable<PaymentResponse>
    { 
        /// <summary>
        /// The payment&#x27;s unique identifier
        /// </summary>
        /// <value>The payment&#x27;s unique identifier</value>
        [Required]
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The payment amount
        /// </summary>
        /// <value>The payment amount</value>
        [Required]
        [DataMember(Name="amount")]
        public int? Amount { get; set; }

        /// <summary>
        /// The three-letter &lt;a href&#x3D;\&quot;https://docs.checkout.com/docs/currency-codes\&quot; target&#x3D;\&quot;blank\&quot;&gt;ISO currency code&lt;/a&gt; of the payment
        /// </summary>
        /// <value>The three-letter &lt;a href&#x3D;\&quot;https://docs.checkout.com/docs/currency-codes\&quot; target&#x3D;\&quot;blank\&quot;&gt;ISO currency code&lt;/a&gt; of the payment</value>
        [Required]
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Whether or not the authorization or capture was successful
        /// </summary>
        /// <value>Whether or not the authorization or capture was successful</value>
        [Required]
        [DataMember(Name="approved")]
        public bool? Approved { get; set; }

        /// <summary>
        /// The status of the payment
        /// </summary>
        /// <value>The status of the payment</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum AuthorizedEnum for Authorized
            /// </summary>
            [EnumMember(Value = "Authorized")]
            AuthorizedEnum = 0,
            /// <summary>
            /// Enum DeclinedEnum for Declined
            /// </summary>
            [EnumMember(Value = "Declined")]
            DeclinedEnum = 1        }

        /// <summary>
        /// The status of the payment
        /// </summary>
        /// <value>The status of the payment</value>
        [Required]
        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// The acquirer authorization code if the payment was authorized
        /// </summary>
        /// <value>The acquirer authorization code if the payment was authorized</value>
        [DataMember(Name="auth_code")]
        public string AuthCode { get; set; }

        /// <summary>
        /// The source of the payment
        /// </summary>
        /// <value>The source of the payment</value>
        [DataMember(Name="source")]
        public PaymentResponseSource Source { get; set; }

        /// <summary>
        /// The date/time the payment was processed
        /// </summary>
        /// <value>The date/time the payment was processed</value>
        [Required]
        [DataMember(Name="processed_on")]
        public DateTime ProcessedOn { get; set; }

        /// <summary>
        /// Your reference for the payment
        /// </summary>
        /// <value>Your reference for the payment</value>
        [DataMember(Name="reference")]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [Required]
        [DataMember(Name="_links")]
        public PaymentResponseLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AuthCode: ").Append(AuthCode).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  ProcessedOn: ").Append(ProcessedOn).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentResponse)obj);
        }

        /// <summary>
        /// Returns true if PaymentResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.SequenceEqual(other.Id)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    Approved == other.Approved ||
                    Approved != null &&
                    Approved.Equals(other.Approved)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    AuthCode == other.AuthCode ||
                    AuthCode != null &&
                    AuthCode.Equals(other.AuthCode)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) && 
                (
                    ProcessedOn == other.ProcessedOn ||
                    ProcessedOn != null &&
                    ProcessedOn.Equals(other.ProcessedOn)
                ) && 
                (
                    Reference == other.Reference ||
                    Reference != null &&
                    Reference.Equals(other.Reference)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (Approved != null)
                    hashCode = hashCode * 59 + Approved.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (AuthCode != null)
                    hashCode = hashCode * 59 + AuthCode.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    if (ProcessedOn != null)
                    hashCode = hashCode * 59 + ProcessedOn.GetHashCode();
                    if (Reference != null)
                    hashCode = hashCode * 59 + Reference.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentResponse left, PaymentResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentResponse left, PaymentResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
